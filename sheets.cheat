% time, timing, stats, statistics

# Use perf from linux-tools to gather statistics about a program
perf stat

# Use perf to record call graphs for a shell call
perf record -g sh -c '<program>'

# View a perf report including call graphs
perf report -g

# View a perf report including call graphs and filtering on a symbol
perf report -g --symbol-filter=<symbol>

# Use sysbench to test sequential RAM reading
sysbench memory --memory-block-size=1G --memory-oper=read --threads=1 run

% network testing

# Create an iperf3 server
iperf3 -s

# Run a download speed test to an iperf3 server
iperf3 -c <server_IP> -P 10

# Run an upload speed test to an iperf3 server
iperf3 -c <server_IP> -P 10 -R

% hacker, hacking, matrix, just for fun

# Print random "movie hacker" text to the terminal
perl -MTime::HiRes -e 'use Time::HiRes qw(usleep); $| = 1; print("\033[1;39m"); while(1) { foreach(0..rand(100)) { print(chr(rand(95)+32)); usleep(rand(3000)); } print("\n"); }'

# Print random "Matrix digital rain" text to the terminal
perl -MTime::HiRes -e 'use Time::HiRes qw(usleep); $| = 1; binmode(STDOUT, "encoding(UTF-8)"); print("\033[1;92m"); while(1) { foreach(0..rand(100)) { print(chr(rand() > 0.7 ? rand(95)+32 : rand(64)+65376)); usleep(rand(3000)); } print("\n"); }'

% git

# Unstage (a) file(s)
git restore --staged <files>

% find, regex

# Use extended regular expressions
find -regextype egrep -regex

# Prune a path from results
find -path <path> -prune -false -o

% journal, logs

# View the log for the most recent boot
journalctl -b

# Use journalctl with case-insensitive paging
SYSTEMD_LESS=-FRSXMKi journalctl

% temp files, tmp

# Make a temporary directory and navigate into it
cd $(mktemp -d)

% dns

# Look up information about your external IP address
dig +short myip.opendns.com @resolver1.opendns.com | xargs whois

% passwords

# Generate a random password and copy it to the clipboard
perl -e 'foreach(0..15+rand(10)) { print(chr(rand(95)+32)) }' | xclip -selection clipboard

% video munging

# Delete various color-related properties from all HEVC mkv files. This is useful because Roku sticks use this information in a buggy way that results in dark, over-saturated video. Assumes only one video track
find -type f -name "*mkv" | perl -ne 'chomp; print($_ . "\n" . `mkvpropedit "$_" -e track:v1 -d color-range -d color-matrix-coefficients -d chroma-siting-horizontal -d chroma-siting-vertical -d color-transfer-characteristics -d color-primaries`) if `mkvinfo "$_"` =~ "HEVC"'

# Convert the audio track of all HEVC EAC3/AC3/AAC 5.1 to stereo AAC. Useful to circumvent Roku stick bug
find -type f -regextype egrep -regex ".*(mkv|mp4)" | perl -ne 'chomp; $ffprobe = `ffprobe "$_" 2>&1`; if($ffprobe =~ "hevc" && ($ffprobe =~ "(eac3|ac3)" || $ffprobe =~ "aac" && $ffprobe =~ "5.1")) { $ext = $1 if /\.(mkv|mp4)$/; `ffmpeg -i "$_" -codec copy -codec:a aac -b:a 160k -ac:a 2 t.$ext`; `mv t.$ext "$_"` }'

# Extract mov_text from video files and convert to SubRip (srt) format. Useful to circumvent Roku stick bug
find -type f -regextype egrep -regex ".*(mkv|mp4)" | perl -ne 'chomp; if(`ffprobe "$_" 2>&1` =~ "mov_text") { $fn = $1 if /^(.*)\.(:?mkv|mp4)$/; `ffmpeg -i "$_" -map s -codec:s srt "$fn.en.srt"` }'

# Extract all subtitles and convert to SubRip (srt) format. Behavior unspecified if multiple subtitle tracks are contained
find -type f -regextype egrep -regex ".*(mkv|mp4)" | perl -ne 'chomp; if(`ffprobe "$_" 2>&1` =~ "Subtitle") { $fn = $1 if /^(.*)\.(:?mkv|mp4)$/; `ffmpeg -i "$_" -map s -codec:s srt "$fn.en.srt"` }'

# Roku fix suite. Series of commands to circumvent Roku stick bug
find -type f -regextype egrep -regex ".*(mkv|mp4)" | perl -ne 'chomp; $ffprobe = `ffprobe "$_" 2>&1`; if($ffprobe =~ "hevc" && ($ffprobe =~ "(eac3|ac3)" || $ffprobe =~ "aac" && $ffprobe =~ "5.1")) { $ext = $1 if /\.(mkv|mp4)$/; `ffmpeg -i "$_" -codec copy -codec:a aac -b:a 160k -ac:a 2 t.$ext`; `mv t.$ext "$_"` }' && find -type f -name "*mkv" | perl -ne 'chomp; print($_ . "\n" . `mkvpropedit "$_" -e track:v1 -d color-range -d color-matrix-coefficients -d chroma-siting-horizontal -d chroma-siting-vertical -d color-transfer-characteristics -d color-primaries`) if `mkvinfo "$_"` =~ "HEVC"'

# Convert mkv files to mp4. Non-audio/video streams will be lost
find -type f -name "*.mkv" | perl -ne 'chomp; $fn = $1 if /(.*)\.mkv/; `ffmpeg -i "$_" -c copy "$fn.mp4" && rm "$_"`'

# Extract a specific subtitles track. First use mkvinfo to inspect contents
find -type f -name "*mkv" | perl -ne 'chomp; $fn = $1 if /^(.*)\.mkv$/; print(`mkvextract "$_" tracks <track_ID>:"$fn.<language_code>.srt"`)'

# Simultaneously convert the audio track of all HEVC/5.1 audio to stereo AAC and repackage (if applicable) in mp4 format
find -type f -regextype egrep -regex ".*(mkv|mp4)" | perl -ne 'chomp; $ffprobe = `ffprobe "$_" 2>&1`; if($ffprobe =~ "hevc" && $ffprobe =~ "5.1") { $name = $1 if /^(.*)\.(mkv|mp4)$/; `ffmpeg -i "$_" -codec copy -codec:a aac -b:a 160k -ac:a 2 t.mp4 && rm "$_" && mv t.mp4 "$name.mp4"` }'

% navi

# Add/update repository
navi repo add <repository>

% shell

# Print all of the key/value pairs in a zsh associative array
for key val in "${(@kv)<variable>}"; do echo "$key -> $val"; done

% torrenting

# Clean up trash files
find -type f -regextype egrep -regex ".*(jpg|txt|nfo|sfv|exe)" -exec rm {} \;
